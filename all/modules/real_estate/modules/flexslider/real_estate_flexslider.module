<?php



/**
 * Implements hook_field_formatter_info().
 *
 * Adds the flexslider format option within the manage display form of
 * of an image field.
 */
function real_estate_flexslider_field_formatter_info() {
  return array(
    'real_estate_flexslider' => array(
      'label' => t('Real Estate Flexslider'),
      'field types' => array('image', 'media'),
      'settings' => array(
        'optionset' => 'real_estate_property',
        'optionset_carusel' => 'real_estate_property_carusel',
        'caption' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Provides display settings form within the manage display page of
 * an image field with formatter flexslider.
 */
function real_estate_flexslider_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  // Show select box for the option set
  $optionsets = array();
  ctools_include('export');
  foreach (flexslider_optionset_load_all() as $name => $optionset) {
    $optionsets[$name] = check_plain($optionset->title);
  }

  $form['optionset'] = array(
    '#title' => t('Option set'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['optionset'],
  );

  $form['optionset_carusel'] = array(
    '#title' => t('Option set for carusel'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['optionset_carusel'],
  );

  // If the image field doesn't have the Title field enabled, tell the user.
  if ($instance['settings']['title_field'] == FALSE) {
    $form['caption'] = array(
      '#title' => t('Use image title as the caption'),
      '#type' => 'checkbox',
      '#disabled' => TRUE,
      '#description' => t('You need to <a href="@url">enable the Title field</a> for this image field to be able use it as a caption.', array('@url' => url('admin/structure/types/manage/' . $instance['bundle'] . '/fields/' . $instance['field_name'], array('fragment' => 'edit-instance-settings-title-field', 'query' => array('destination' => 'admin/structure/types/manage/' . $instance['bundle'] . '/display'))))),
    );
  }
  else {
    $form['caption'] = array(
      '#title' => t('Use image title as the caption'),
      '#type' => 'checkbox',
      '#default_value' => $settings['caption'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Displays the summary of the set options of a flexslider formatted image field
 */
function real_estate_flexslider_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  // Load option set
  ctools_include('export');

  if (!empty($settings['optionset'])) {
    $o = flexslider_optionset_load($settings['optionset']);
    if ($o !== NULL) {
      $optionset = $o;
    }
  }

  // Build settings summary
  $optionset = isset($optionset) ? $optionset->title : t('Default settings');
  $summary[] = t('Option set: %optionset', array('%optionset' => $optionset));

  if (!empty($settings['optionset_carusel'])) {
    $o = flexslider_optionset_load($settings['optionset_carusel']);
    if ($o !== NULL) {
      $optionset_carusel = $o;
    }
  }

  // Build settings summary
  $optionset_carusel = isset($optionset_carusel) ? $optionset_carusel->title : t('Default settings');
  $summary[] = t('Option set: %optionset_carusel', array('%optionset_carusel' => $optionset_carusel));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * Prepares a renderable array of images and adds the neccessary JS and CSS
 */
function real_estate_flexslider_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($field['type'] == 'media') {
    $image_items = array();
    foreach ($items as $item) {
      if ($item['file']->type == 'image') {
        $file = (array) $item['file'];
        $file += array('alt' => '', 'title' => '');
        $image_items[] = $file;
      }
    }
    $items = $image_items;
  }

  $element = array();
  if (count($items) > 0) {
    $element[] = array(
      '#theme' => 'real_estate_flexslider',
      '#items' => $items,
      '#settings' => $display['settings'],
    );
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function real_estate_flexslider_theme() {
  return array(
    // Container for nav elements (arrows)
    'real_estate_flexslider' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'template' => 'theme/real_estate_flexslider',

    ),

  );
}

/**
 * Template preprocess handler for 'flexslider' theme.
 */
function template_preprocess_real_estate_flexslider(&$vars) {

  // Reference configuration variables
  $optionset = &$vars['settings']['optionset'];
  $settings = &$vars['settings'];
  $items = &$vars['items'];

  // Set the list type
  $settings['type'] = 'ul';

  // Load the selected optionset
  if (!empty($optionset)) {
    $optionset = flexslider_optionset_load($optionset);
  }

  // Check if an optionset was loaded
  if (empty($optionset)) {
    // Fall back to 'default' option set
    $optionset = flexslider_optionset_load('default');
    watchdog('flexslider', 'Fallback to default optionset.', array(), WATCHDOG_WARNING);
  }

  // Configure attributes for containing elements
  $attributes = array();
  // Merge with defined attributes
  if (isset($settings['attributes']) and is_array($settings['attributes'])) {
    $attributes += $settings['attributes'];
  }

  // Each flexslider instance gets a unique id
  $flexslider_id = &drupal_static('flexslider_id', 0);
  $attributes['id'] = 'flexslider-' . ++$flexslider_id;

  // Add the flexslider class to be namespaced
  $attributes['class'][] = 'flexslider';

  // Add the namespace to any classes
  if (!empty($attributes['class']) &&
      !empty($optionset->options['namespace'])
  ) {
    foreach ($attributes['class'] as $key => $value) {
      $attributes['class'][$key] = $optionset->options['namespace'] . $value;
    }
  }

  // Add default class
  $attributes['class'][] = 'flexslider';

  // Add the attributes to the settings array.
  $settings['attributes'] = $attributes;

  // Finally, add the FlexSlider library
  flexslider_add($settings['attributes']['id'], $optionset);


  $attributes['id'] = 'flexslider-' . ++$flexslider_id;
  $settings['attributes_carusel'] = $attributes;

  // Reference configuration variables
  $optionset_carusel = &$vars['settings']['optionset_carusel'];
  $optionset_carusel = flexslider_optionset_load($optionset_carusel);

  flexslider_add($settings['attributes_carusel']['id'], $optionset_carusel);
}



