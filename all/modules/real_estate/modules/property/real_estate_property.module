<?php

/**
 * @file
 * Real Estate Property module.
 */

/**
 * Implements hook_entity_info().
 */
function real_estate_property_entity_info() {
  $return = array(
    'real_estate_property' => array(
      'label' => t('Property'),
      'entity class' => 'RealEstatePropertyEntity',
      'controller class' => 'RealEstatePropertyEntityController',
      'base table' => 'real_estate_property',
      'revision table' => 'real_estate_property_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'property_id',
        'revision' => 'revision_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'uri callback' => 'real_estate_property_uri',
      'label callback' => 'real_estate_property_label',
      'token type' => 'real-estate-property',
      // If it enabled, then in views no fields !!!!
      /* 'metadata controller class' => '' */
      'access callback' => 'real_estate_property_access',
      'access arguments' => array(
        'user key' => 'uid',
        'access tag' => 'real_estate_property_access',
      ),
      'permission labels' => array(
        'singular' => t('property'),
        'plural' => t('property'),
      ),

      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/real_estate/property',
        'file' => 'includes/real_estate_property.uicontroller.inc',
        'controller class' => 'RealEstatePropertyUIController',
        'menu wildcard' => '%real_estate_property',
      ),
      'module' => 'real_estate_property',

    ),

    'real_estate_property_type' => array(
      'label' => t('Property Type'),
      'entity class' => 'RealEstatePropertyTypeEntity',
      'controller class' => 'RealEstatePropertyTypeEntityController',
      'base table' => 'real_estate_property_type',
      'fieldable' => FALSE,
      'bundle of' => 'real_estate_property',
      'access callback' => 'real_estate_property_type_access',
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'type',
      ),
      'module' => 'real_estate_property',
      'admin ui' => array(
        'path' => 'admin/real_estate/property_type',
        'file' => 'includes/real_estate_property_type.uicontroller.inc',
        'controller class' => 'RealEstatePropertyTypeUIController',
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function real_estate_property_entity_info_alter(&$entity_info) {
  foreach (real_estate_property_get_types() as $type => $info) {
    $entity_info['real_estate_property']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/real_estate/property_type/manage/%real_estate_property_type',
        'real path' => 'admin/real_estate/property_type/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer property type'),
      ),
    );

  }
}

/**
 * Access callback for the entity API.
 */
function real_estate_property_access($op, $property = NULL, $account = NULL) {
  if (user_access('administer property', $account)) {
    return TRUE;
  }
  if (isset($property) && $type_name = $property->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name property", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for the entity API.
 */
function real_estate_property_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer property types', $account);
}

/**
 * Gets an array of all real_estate_property types, keyed by the type name.
 *
 * @param string $type_name
 *   If set, the type with the given name is returned.
 *
 * @return real_estate_propertyType[]
 *   Depending whether $type isset, an array of real_estate_property types
 *   or a single one.
 */
function real_estate_property_get_types($type_name = NULL) {
  // Entity_load will get the Entity controller for our real_estate_property
  // entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('real_estate_property_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a real_estate_property type by string.
 *
 * @param string $type
 *   The machine-readable name of a real_estate_property type to load.
 *
 * @return \real_estate_propertyType[]
 *   A real_estate_property type array or FALSE if $type does not exist.
 */
function real_estate_property_type_load($type) {
  return real_estate_property_get_types($type);
}


/**
 * Fetch a real_estate_property object.
 *
 * @param int $real_estate_property_id
 *   Integer specifying the real_estate_property id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return mixed
 *   A fully-loaded $real_estate_property object or FALSE if it
 *   cannot be loaded.
 */
function real_estate_property_load($real_estate_property_id, $reset = FALSE) {
  $real_estate_property = real_estate_property_load_multiple(array($real_estate_property_id), array(), $reset);
  return reset($real_estate_property);
}


/**
 * Load multiple real_estate_property based on certain conditions.
 *
 * @param array $real_estate_property_ids
 *   An array of real_estate_property IDs.
 * @param array $conditions
 *   An array of conditions to match against the {real_estate_property} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of real_estate_property objects,
 *   indexed by real_estate_property_id.
 */
function real_estate_property_load_multiple($real_estate_property_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('real_estate_property', $real_estate_property_ids, $conditions, $reset);
}


/**
 * Deletes a real_estate_property.
 */
function real_estate_property_delete(RealEstatePropertyEntity $real_estate_property) {
  $real_estate_property->delete();
}


/**
 * Delete multiple real_estate_property.
 *
 * @param array $real_estate_property_ids
 *   An array of real_estate_property IDs.
 */
function real_estate_property_delete_multiple(array $real_estate_property_ids) {
  entity_get_controller('real_estate_property')->delete($real_estate_property_ids);
}


/**
 * Create a real_estate_property object.
 */
function real_estate_property_create($values = array()) {
  return entity_get_controller('real_estate_property')->create($values);
}


/**
 * Create a real_estate_property_type object.
 */
function real_estate_property_type_create($values = array()) {
  return entity_get_controller('real_estate_property_type')->create($values);
}


/**
 * Saves a real_estate_property to the database.
 *
 * @param RealEstatePropertyEntity $real_estate_property
 *   The real_estate_property object.
 */
function real_estate_property_save(RealEstatePropertyEntity $real_estate_property) {
  return $real_estate_property->save();
}


/**
 * Saves a real_estate_property type to the db.
 */
function real_estate_property_type_save(RealEstatePropertyTypeEntity $type) {
  return $type->save();
}


/**
 * Deletes a real_estate_property type from the db.
 */
function real_estate_property_type_delete(RealEstatePropertyTypeEntity $type) {
  $type->delete();
}


/**
 * URI callback for real_estate_property.
 */
function real_estate_property_uri(RealEstatePropertyEntity $real_estate_property) {
  return array(
    'path' => 'real_estate_property/' . $real_estate_property->property_id,
  );
}


/**
 * Menu title callback for showing individual entities.
 */
function real_estate_property_page_title(RealEstatePropertyEntity $real_estate_property) {
  return $real_estate_property->title;
}


/**
 * Sets up content to show an individual real_estate_property.
 */
function real_estate_property_page_view($real_estate_property, $view_mode = 'full') {
  $controller = entity_get_controller('real_estate_property');
  $content = $controller->view(array($real_estate_property->property_id => $real_estate_property));
  drupal_set_title($real_estate_property->title);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function real_estate_property_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'real_estate_property') . '/views',
  );
}


/**
 * Implements hook_theme().
 */
function real_estate_property_theme() {
  return array(
    'real_estate_property_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/real_estate_property.uicontroller.inc',
    ),
    'real_estate_property' => array(
      'render element' => 'elements',
      'template' => 'real_estate_property',
      'path' => drupal_get_path('module', 'real_estate_property') . '/theme',
    ),

  );
}

/**
 * Implements hook_image_default_styles().
 */
function real_estate_property_image_default_styles() {
  $styles = array();

  $styles['real_estate_property_full'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 394,
          'height' => 296,
          'upscale' => TRUE,
        ),
        'weight' => 0,
      ),
    ),
  );

  $styles['real_estate_property_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 100,
          'height' => 70,
        ),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_permission().
 */
function real_estate_property_permission() {
  $permissions = array(
    'administer property' => array(
      'title' => t('Administer Real Estate Property'),
      'description' => t('Edit and delete property.'),
    ),
    'administer property types' => array(
      'title' => t('Administer Real Estate Property types'),
      'description' => t('Create, edit and delete propterty types.'),
    ),
  );

  // Permissions per property.
  foreach (real_estate_property_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name property" => array(
        'title' => t('%type_name: Edit any property', array('%type_name' => $type->label)),
      ),
      "view any $type_name property" => array(
        'title' => t('%type_name: View any property', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Function for adding to bundle three fields: Address, Price and Photo.
 */
function _real_estate_property_type_add_few_fields($property_type) {
  if (field_read_instance('real_estate_property', 'property_address', $property_type) === FALSE) {
    // Add the field Address to the just created bundle.
    $instance = array(
      'field_name' => 'property_address',
      'entity_type' => 'real_estate_property',
      'label' => 'Address',
      'bundle' => $property_type,
      'required' => TRUE,
      'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
      /*
        'widget' => array(
          'type' => 'rooms_options',
        ),
      */
    );
    field_create_instance($instance);
  }

  if (field_read_instance('real_estate_property', 'property_photo', $property_type) === FALSE) {
    // Add the field Photo to the just created bundle.
    $instance = array(
      'field_name' => 'property_photo',
      'entity_type' => 'real_estate_property',
      'label' => 'Photo',
      'bundle' => $property_type,
      'required' => TRUE,
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
      /*'widget' => array(
        'type' => 'rooms_options',
      ),*/
    );
    field_create_instance($instance);
  }

  if (field_read_instance('real_estate_property', 'property_price', $property_type) === FALSE) {
    // Add the field Price to the just created bundle.
    $instance = array(
      'field_name' => 'property_price',
      'entity_type' => 'real_estate_property',
      'label' => 'Price',
      'bundle' => $property_type,
      'required' => FALSE,
      'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
      /*
        'widget' => array(
          'type' => 'rooms_options',
        ),
      */
    );
    field_create_instance($instance);
  }

  if (field_read_instance('real_estate_property', 'property_lot_size', $property_type) === FALSE) {
    // Add the field Price to the just created bundle.
    $instance = array(
      'field_name' => 'property_lot_size',
      'entity_type' => 'real_estate_property',
      'label' => 'Lot size',
      'bundle' => $property_type,
      'required' => FALSE,
      'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
      /*
        'widget' => array(
          'type' => 'rooms_options',
        ),
      */
    );
    field_create_instance($instance);
  }

  if (field_read_instance('real_estate_property', 'property_description', $property_type) === FALSE) {
    // Add the field Price to the just created bundle.
    $instance = array(
      'field_name' => 'property_description',
      'entity_type' => 'real_estate_property',
      'label' => 'Description',
      'bundle' => $property_type,
      'required' => FALSE,
      /*
        'widget' => array(
          'type' => 'rooms_options',
        ),
      */
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function real_estate_property_field_extra_fields() {
  foreach (real_estate_property_get_types() as $type) {
    $extra['real_estate_property'][$type->type] = array(
      'display' => array(
        'title_view' => array(
          'label' => t('Title'),
          'description' => t("Property's title"),
          'weight' => 0,
        ),
      ),
    );
  }
  return $extra;

}
